# This is too slow with HTTP chunked.
#@require-interface stdio

table_create --name Users --flags TABLE_PAT_KEY --key_type ShortText
column_create --table Users --name immediate --type Bool

# Since only 58 nodes were deleted, no reuse occurred.
# (Reuse occurs when more than 256 nodes are deleted.)
#@disable-logging
#@generate-series 1 30 Users '{"_key" => "%d" % i, "immediate" => true}'
#@generate-series 1 30 Users '{"_key" => "A-User%04d" % i, "immediate" => false}'
#@enable-logging
delete Users --filter '_key != "10" && _key != "A-User0002"'

check Users
defrag
check Users

# Reuse targets were reset because defragmentation was done.
# It is reused by adding and deleting again.
#@disable-logging
#@generate-series 31 290 Users '{"_key" => "%d" % i, "immediate" => true}'
#@generate-series 1 260 Users '{"_key" => "B-User%04d" % i, "immediate" => false}'
#@enable-logging
delete Users --filter '_key != "41" && _key != "B-User0003"'

# The node is reused.
# "C-User0001" and "C-Users-0002" are registered in the reused node.
# (Reuse is only if the key length is the same as that of the deleted node.)
load --table Users
[
{"_key":"C-User0001", "immediate":false},
{"_key":"C-User0002", "immediate":false},
{"_key":"C-User99", "immediate":false}
]

# The node is reused.
# "C01", "C02" and "CC01" are registered in the reused node.
# All immediate=true keys are handled as key length 0.
# So, key of length 4 is not deleted, but "CC01" is also a reused node.
load --table Users
[
{"_key":"C01", "immediate":true},
{"_key":"C02", "immediate":true},
{"_key":"CC01", "immediate":true}
]

check Users
select Users --sort_keys _key

# `dump` should still be normal after defragmentation (after clearing garbage).
dump Users
