plugin_register sharding
[[0,0.0,0.0],true]
table_create Logs_20170315 TABLE_NO_KEY
[[0,0.0,0.0],true]
column_create Logs_20170315 timestamp COLUMN_SCALAR Time
[[0,0.0,0.0],true]
column_create Logs_20170315 price COLUMN_SCALAR UInt32
[[0,0.0,0.0],true]
load --table Logs_20170315
[
{"timestamp": "2017/03/15 00:00:00", "price": 1000},
{"timestamp": "2017/03/15 01:00:00", "price":  900},
{"timestamp": "2017/03/15 02:00:00", "price":  300}
]
[[0,0.0,0.0],3]
table_create Times TABLE_PAT_KEY Time
[[0,0.0,0.0],true]
column_create Times logs_20170315 COLUMN_INDEX Logs_20170315 timestamp
[[0,0.0,0.0],true]
log_level --level debug
[[0,0.0,0.0],true]
logical_range_filter Logs   --shard_key timestamp   --columns[price_with_tax].stage initial   --columns[price_with_tax].type UInt32   --columns[price_with_tax].flags COLUMN_SCALAR   --columns[price_with_tax].value 'price * 1.08'   --sort_keys price_with_tax   --min "2017/04/01 00:00:00"   --offset 1   --limit 3
[
  [
    0,
    0.0,
    0.0
  ],
  [
    [
      [
        "price_with_tax",
        "UInt32"
      ],
      [
        "price",
        "UInt32"
      ],
      [
        "timestamp",
        "Time"
      ]
    ]
  ]
]
#>logical_range_filter --columns[price_with_tax].flags "COLUMN_SCALAR" --columns[price_with_tax].stage "initial" --columns[price_with_tax].type "UInt32" --columns[price_with_tax].value "price * 1.08" --limit "3" --logical_table "Logs" --min "2017/04/01 00:00:00" --offset "1" --shard_key "timestamp" --sort_keys "price_with_tax"
#:000000000000000 columns[price_with_tax](0)
#:000000000000000 output(0)
#<000000000000000 rc=0
log_level --level notice
[[0,0.0,0.0],true]
