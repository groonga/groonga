plugin_register sharding
[[0,0.0,0.0],true]
plugin_register functions/time
[[0,0.0,0.0],true]
table_create Logs_20170315 TABLE_NO_KEY
[[0,0.0,0.0],true]
column_create Logs_20170315 timestamp COLUMN_SCALAR Time
[[0,0.0,0.0],true]
column_create Logs_20170315 price COLUMN_SCALAR UInt32
[[0,0.0,0.0],true]
table_create Logs_20170316 TABLE_NO_KEY
[[0,0.0,0.0],true]
column_create Logs_20170316 timestamp COLUMN_SCALAR Time
[[0,0.0,0.0],true]
column_create Logs_20170316 price COLUMN_SCALAR UInt32
[[0,0.0,0.0],true]
load --table Logs_20170315
[
{"timestamp": "2017/03/15 07:00:00", "price": 1000},
{"timestamp": "2017/03/15 07:01:00", "price":  900},
{"timestamp": "2017/03/15 07:02:00", "price":  300},
{"timestamp": "2017/03/15 07:03:00", "price":  200},
{"timestamp": "2017/03/15 07:10:00", "price":  530},
{"timestamp": "2017/03/15 07:11:00", "price":  520},
{"timestamp": "2017/03/15 07:12:00", "price":  110},
{"timestamp": "2017/03/15 07:13:00", "price":  410},
{"timestamp": "2017/03/15 07:14:00", "price":  710}
]
[[0,0.0,0.0],9]
load --table Logs_20170316
[
{"timestamp": "2017/03/16 08:20:00", "price":  800},
{"timestamp": "2017/03/16 08:21:00", "price":  400},
{"timestamp": "2017/03/16 08:22:00", "price":  500},
{"timestamp": "2017/03/16 08:23:00", "price":  300}
]
[[0,0.0,0.0],4]
table_create Times TABLE_PAT_KEY Time
[[0,0.0,0.0],true]
column_create Times logs_20170315 COLUMN_INDEX Logs_20170315 timestamp
[[0,0.0,0.0],true]
column_create Times logs_20170316 COLUMN_INDEX Logs_20170316 timestamp
[[0,0.0,0.0],true]
log_level --level debug
[[0,0.0,0.0],true]
logical_range_filter Logs   --min '2017/03/15 07:01:00'   --min_border include   --max '2017/03/16 08:22:00'   --max_border include   --shard_key timestamp   --columns[five_minute].stage filtered   --columns[five_minute].type Time   --columns[five_minute].flags COLUMN_SCALAR   --columns[five_minute].value 'time_classify_minute(timestamp, 5)'   --columns[n_records_per_five_minute].stage filtered   --columns[n_records_per_five_minute].type UInt32   --columns[n_records_per_five_minute].flags COLUMN_SCALAR   --columns[n_records_per_five_minute].value 'window_count()'   --columns[n_records_per_five_minute].window.group_keys 'five_minute'   --filter 'price >= 300'   --post_filter 'n_records_per_five_minute >= 3'   --offset 3   --limit 4   --output_columns _id,n_records_per_five_minute,price
[
  [
    0,
    0.0,
    0.0
  ],
  [
    [
      [
        "_id",
        "UInt32"
      ],
      [
        "n_records_per_five_minute",
        "UInt32"
      ],
      [
        "price",
        "UInt32"
      ]
    ],
    [
      9,
      4,
      710
    ],
    [
      1,
      3,
      800
    ],
    [
      2,
      3,
      400
    ],
    [
      3,
      3,
      500
    ]
  ]
]
#|d| [logical_range_filter][select] <Logs_20170315>: dynamic columns are used
#|d| [logical_range_filter][window] <Logs_20170315>: [2017/03/15 07:01:00,2017/03/15 08:00:00)
#|d| [logical_range_filter][select] <Logs_20170316>: dynamic columns are used
#|d| [logical_range_filter][window] <Logs_20170316>: [2017/03/16 08:00:00,2017/03/16 08:22:00]
#>logical_range_filter --columns[five_minute].flags "COLUMN_SCALAR" --columns[five_minute].stage "filtered" --columns[five_minute].type "Time" --columns[five_minute].value "time_classify_minute(timestamp, 5)" --columns[n_records_per_five_minute].flags "COLUMN_SCALAR" --columns[n_records_per_five_minute].stage "filtered" --columns[n_records_per_five_minute].type "UInt32" --columns[n_records_per_five_minute].value "window_count()" --columns[n_records_per_five_minute].window.group_keys "five_minute" --filter "price >= 300" --limit "4" --logical_table "Logs" --max "2017/03/16 08:22:00" --max_border "include" --min "2017/03/15 07:01:00" --min_border "include" --offset "3" --output_columns "_id,n_records_per_five_minute,price" --post_filter "n_records_per_five_minute >= 3" --shard_key "timestamp"
#:000000000000000 filter(8): Logs_20170315.timestamp greater_equal 1489528860.0
#:000000000000000 filter(6): Logs_20170315.price greater_equal 300
#:000000000000000 filter(6): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/15 07:01:00", "include", "2017/03/15 08:00:00", "exclude")
#:000000000000000 columns[five_minute](6)
#:000000000000000 columns[n_records_per_five_minute](6)
#:000000000000000 filter(4): 2147483652.n_records_per_five_minute greater_equal 3
#:000000000000000 sort(1)[Logs_20170315]: timestamp
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/15 08:00:00", "include", "2017/03/15 09:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/15 09:00:00", "include", "2017/03/15 10:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/15 10:00:00", "include", "2017/03/15 11:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/15 11:00:00", "include", "2017/03/15 12:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/15 12:00:00", "include", "2017/03/15 13:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/15 13:00:00", "include", "2017/03/15 14:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/15 14:00:00", "include", "2017/03/15 15:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/15 15:00:00", "include", "2017/03/15 16:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/15 16:00:00", "include", "2017/03/15 17:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/15 17:00:00", "include", "2017/03/15 18:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/15 18:00:00", "include", "2017/03/15 19:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/15 19:00:00", "include", "2017/03/15 20:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/15 20:00:00", "include", "2017/03/15 21:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/15 21:00:00", "include", "2017/03/15 22:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/15 22:00:00", "include", "2017/03/15 23:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/15 23:00:00", "include", "2017/03/16 00:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/16 00:00:00", "include", "2017/03/16 01:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/16 01:00:00", "include", "2017/03/16 02:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/16 02:00:00", "include", "2017/03/16 03:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/16 03:00:00", "include", "2017/03/16 04:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/16 04:00:00", "include", "2017/03/16 05:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/16 05:00:00", "include", "2017/03/16 06:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/16 06:00:00", "include", "2017/03/16 07:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/16 07:00:00", "include", "2017/03/16 08:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170315)>, "2017/03/16 08:00:00", "include", "2017/03/16 08:22:00", "include")
#:000000000000000 filter(3): Logs_20170316.timestamp less_equal 1489620120.0
#:000000000000000 filter(3): Logs_20170316.price greater_equal 300
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/15 07:01:00", "include", "2017/03/15 08:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/15 08:00:00", "include", "2017/03/15 09:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/15 09:00:00", "include", "2017/03/15 10:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/15 10:00:00", "include", "2017/03/15 11:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/15 11:00:00", "include", "2017/03/15 12:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/15 12:00:00", "include", "2017/03/15 13:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/15 13:00:00", "include", "2017/03/15 14:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/15 14:00:00", "include", "2017/03/15 15:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/15 15:00:00", "include", "2017/03/15 16:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/15 16:00:00", "include", "2017/03/15 17:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/15 17:00:00", "include", "2017/03/15 18:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/15 18:00:00", "include", "2017/03/15 19:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/15 19:00:00", "include", "2017/03/15 20:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/15 20:00:00", "include", "2017/03/15 21:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/15 21:00:00", "include", "2017/03/15 22:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/15 22:00:00", "include", "2017/03/15 23:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/15 23:00:00", "include", "2017/03/16 00:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/16 00:00:00", "include", "2017/03/16 01:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/16 01:00:00", "include", "2017/03/16 02:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/16 02:00:00", "include", "2017/03/16 03:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/16 03:00:00", "include", "2017/03/16 04:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/16 04:00:00", "include", "2017/03/16 05:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/16 05:00:00", "include", "2017/03/16 06:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/16 06:00:00", "include", "2017/03/16 07:00:00", "exclude")
#:000000000000000 filter(0): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/16 07:00:00", "include", "2017/03/16 08:00:00", "exclude")
#:000000000000000 filter(3): between(#<accessor _key(anonymous).timestamp(Logs_20170316)>, "2017/03/16 08:00:00", "include", "2017/03/16 08:22:00", "include")
#:000000000000000 columns[five_minute](3)
#:000000000000000 columns[n_records_per_five_minute](3)
#:000000000000000 filter(3): 2147483649.n_records_per_five_minute greater_equal 3
#:000000000000000 sort(3)[Logs_20170316]: timestamp
#:000000000000000 output(4)
#<000000000000000 rc=0
log_level --level notice
[[0,0.0,0.0],true]
