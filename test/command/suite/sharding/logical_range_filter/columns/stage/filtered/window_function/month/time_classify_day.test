#@on-error omit
plugin_register sharding
#@on-error default

plugin_register functions/time

table_create Logs_201703 TABLE_NO_KEY
column_create Logs_201703 timestamp COLUMN_SCALAR Time
column_create Logs_201703 price COLUMN_SCALAR UInt32

load --table Logs_201703
[
{"timestamp": "2017/03/15 00:00:00", "price": 1000},
{"timestamp": "2017/03/15 01:00:00", "price":  900},
{"timestamp": "2017/03/15 02:00:00", "price":  300},
{"timestamp": "2017/03/15 03:00:00", "price":  200},
{"timestamp": "2017/03/16 10:00:00", "price":  530},
{"timestamp": "2017/03/16 11:00:00", "price":  520},
{"timestamp": "2017/03/16 12:00:00", "price":  110},
{"timestamp": "2017/03/16 13:00:00", "price":  410},
{"timestamp": "2017/03/16 14:00:00", "price":  710},
{"timestamp": "2017/03/17 20:00:00", "price":  800},
{"timestamp": "2017/03/17 21:00:00", "price":  400},
{"timestamp": "2017/03/17 22:00:00", "price":  500},
{"timestamp": "2017/03/17 23:00:00", "price":  300}
]

table_create Times TABLE_PAT_KEY Time
column_create Times logs_201703 COLUMN_INDEX Logs_201703 timestamp

#@add-important-log-levels debug
log_level --level debug
#@collect-query-log true
logical_range_filter Logs \
  --shard_key timestamp \
  --columns[day].stage filtered \
  --columns[day].type Time \
  --columns[day].flags COLUMN_SCALAR \
  --columns[day].value 'time_classify_day(timestamp)' \
  --columns[n_records_per_day].stage filtered \
  --columns[n_records_per_day].type UInt32 \
  --columns[n_records_per_day].flags COLUMN_SCALAR \
  --columns[n_records_per_day].value 'window_count()' \
  --columns[n_records_per_day].window.group_keys 'day' \
  --filter 'price >= 300' \
  --post_filter 'n_records_per_day >= 3' \
  --offset 1 \
  --limit 3 \
  --output_columns _id,n_records_per_day,price
#@collect-query-log false
log_level --level notice
#@remove-important-log-levels debug
