# -*- po -*-
# Japanese translations for 1.2.1 package.
# Copyright (C) 2009-2011, Brazil, Inc
# This file is distributed under the same license as the groonga package.
# Kouhei Sutou <kou@clear-code.com>, 2011.
#
msgid ""
msgstr ""
"Project-Id-Version: 1.2.1\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2014-08-14 22:59+0900\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid "同じ検索キーワードなのに全文検索結果が異なる"
msgstr ""

msgid "同じ検索キーワードでも一緒に指定するクエリによっては全文検索の結果が異なることがあります。ここでは、その原因と対策方法を説明します。"
msgstr ""

msgid "例"
msgstr ""

msgid "まず、実際に検索結果が異なる例を説明します。"
msgstr ""

msgid "DDLは以下の通りです。BlogsテーブルのbodyカラムをTokenMecabトークナイザーを使ってトークナイズしてからインデックスを作成しています。::"
msgstr ""

msgid "テスト用のデータは1件だけ投入します。::"
msgstr ""

msgid "まず、全文検索のみで検索します。この場合ヒットします。::"
msgstr ""

msgid "続いて、範囲指定と全文検索を組み合わせて検索します（1285858800は2010/10/1 0:0:0の秒表記）。この場合もヒットします。::"
msgstr ""

msgid "最後に、範囲指定と全文検索の順番を入れ替えて検索します。個々の条件は同じですが、この場合はヒットしません。::"
msgstr ""

msgid "どうしてこのような挙動になるかを説明します。"
msgstr ""

msgid "原因"
msgstr ""

msgid "このような挙動になるのは全文検索時に複数の検索の挙動を使い分けているからです。ここでは簡単に説明するので、詳細は :doc:`/spec/search` を参照してください。"
msgstr ""

msgid "検索の挙動には以下の3種類があります。"
msgstr ""

msgid "完全一致検索"
msgstr ""

msgid "非わかち書き検索"
msgstr ""

msgid "部分一致検索"
msgstr ""

msgid "Groongaは基本的に完全一致検索のみを行います。上記の例では「東京都民に深刻なダメージを与えました。」を「東京都」というクエリで検索していますが、TokenMecabトークナイザーを使っている場合はこのクエリはマッチしません。"
msgstr ""

msgid "検索対象の「東京都民に深刻なダメージを与えました。」は"
msgstr ""

msgid "東京 / 都民 / に / 深刻 / な / ダメージ / を / 与え / まし / た / 。"
msgstr ""

msgid "とトークナイズされますが、クエリの「東京都」は"
msgstr ""

msgid "東京 / 都"
msgstr ""

msgid "とトークナイズされるため、完全一致しません。"
msgstr ""

msgid "Groongaは完全一致検索した結果のヒット件数が所定の閾値を超えない場合に限り、非わかち書き検索を行い、それでもヒット件数が閾値を超えない場合は部分一致検索を行います（閾値は1がデフォルト値となっています）。このケースのデータは部分一致検索ではヒットするので、「東京都」クエリのみを指定するとヒットします。"
msgstr ""

msgid "しかし、以下のように全文検索前にすでに閾値が越えている場合（「updated_at < 1285858800」で1件ヒットし、閾値を越える）は、たとえ完全一致検索で1件もヒットしない場合でも部分一致検索などを行いません。::"
msgstr ""

msgid "そのため、条件の順序を変えると検索結果が変わるという状況が発生します。以下で、この情報を回避する方法を2種類紹介しますが、それぞれトレードオフとなる条件があるので採用するかどうかを十分検討してください。"
msgstr ""

msgid "対策方法1: トークナイザーを変更する"
msgstr ""

msgid "TokenMecabトークナイザーは事前に準備した辞書を用いてトークナイズするため、再現率よりも適合率を重視したトークナイザーと言えます。一方、TokenBigramなど、N-gram系のトークナイザーは適合率を重視したトークナイザーと言えます。例えば、TokenMecabの場合「東京都」で「京都」に完全一致することはありませんが、TokenBigramでは完全一致します。一方、TokenMecabでは「東京都民」に完全一致しませんが、TokenBigramでは完全一致します。"
msgstr ""

msgid "このようにN-gram系のトークナイザーを指定することにより再現率をあげることができますが、適合率が下がり検索ノイズが含まれる可能性が高くなります。この度合いを調整するためには :doc:`/reference/commands/select` のmatch_columnsで使用する索引毎に重み付けを指定します。"
msgstr ""

msgid "ここでも、前述の例を使って具体例を示します。まず、TokenBigramを用いた索引を追加します。::"
msgstr ""

msgid "この状態でも以前はマッチしなかったレコードがヒットするようになります。::"
msgstr ""

msgid "しかし、N-gram系のトークナイザーの方がTokenMecabトークナイザーよりも語のヒット数が多いため、N-gram系のヒットスコアの方が重く扱われてしまいます。N-gram系のトークナイザーの方がTokenMecabトークナイザーよりも適合率の低い場合が多いので、このままでは検索ノイズが上位に表示される可能性が高くなります。"
msgstr ""

msgid "そこで、TokenMecabトークナイザーを使って作った索引の方をTokenBigramトークナイザーを使って作った索引よりも重視するように重み付けを指定します。これは、match_columnsオプションで指定できます。::"
msgstr ""

msgid "この場合はスコアが11になっています。内訳は、Terms.blog_body索引（TokenMecabトークナイザーを使用）でマッチしたので10、Bigram.blog_body索引（TokenBigramトークナイザーを使用）でマッチしたので3、これらを合計して13になっています。このようにTokenMecabトークナイザーの重みを高くすることにより、検索ノイズが上位にくることを抑えつつ再現率を上げることができます。"
msgstr ""

msgid "この例は日本語だったのでTokenBigramトークナイザーでよかったのですが、アルファベットの場合はTokenBigramSplitSymbolAlphaトークナイザーなども利用する必要があります。例えば、「楽しいbilliard」はTokenBigramトークナイザーでは"
msgstr ""

msgid "楽し / しい / billiard"
msgstr ""

msgid "となり、「bill」では完全一致しません。一方、TokenBigramSplitSymbolAlphaトークナイザーを使うと"
msgstr ""

msgid "楽し / しい / いb / bi / il / ll / li / ia / ar / rd / d"
msgstr ""

msgid "となり、「bill」でも完全一致します。"
msgstr ""

msgid "TokenBigramSplitSymbolAlphaトークナイザーを使う場合も重み付けを考慮する必要があることはかわりありません。"
msgstr ""

msgid "利用できるバイグラム系のトークナイザーの一覧は以下の通りです。"
msgstr ""

msgid "TokenBigram: バイグラムでトークナイズする。連続する記号・アルファベット・数字は一語として扱う。"
msgstr ""

msgid "TokenBigramSplitSymbol: 記号もバイグラムでトークナイズする。連続するアルファベット・数字は一語として扱う。"
msgstr ""

msgid "TokenBigramSplitSymbolAlpha: 記号とアルファベットもバイグラムでトークナイズする。連続する数字は一語として扱う。"
msgstr ""

msgid "TokenBigramSplitSymbolAlphaDigit: 記号・アルファベット・数字もバイグラムでトークナイズする。"
msgstr ""

msgid "TokenBigramIgnoreBlank: バイグラムでトークナイズする。連続する記号・アルファベット・数字は一語として扱う。空白は無視する。"
msgstr ""

msgid "TokenBigramIgnoreBlankSplitSymbol: 記号もバイグラムでトークナイズする。連続するアルファベット・数字は一語として扱う。空白は無視する。"
msgstr ""

msgid "TokenBigramIgnoreBlankSplitSymbolAlpha: 記号とアルファベットもバイグラムでトークナイズする。連続する数字は一語として扱う。空白は無視する。"
msgstr ""

msgid "TokenBigramIgnoreBlankSplitSymbolAlphaDigit: 記号・アルファベット・数字もバイグラムでトークナイズする。空白は無視する。"
msgstr ""

msgid "対策方法2: 閾値をあげる"
msgstr ""

msgid "非わかち書き検索・部分一致検索を利用するかどうかの閾値は ``--default-match-escalation-threshold`` オプションで変更することができます。以下のように指定すると、100件以下のヒット数であれば、たとえ完全一致検索でヒットしても、非わかち書き検索・部分一致検索を行います。::"
msgstr ""

msgid "この場合も対策方法1同様、検索ノイズが上位に現れる可能性が高くなることに注意してください。検索ノイズが多くなった場合は指定する値を低くする必要があります。"
msgstr ""
