#! /bin/sh
### BEGIN INIT INFO
# Provides:          groonga-httpd
# Required-Start:    $remote_fs $network
# Required-Stop:     $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: groonga-httpd's init script
# Description:       groonga-httpd is a HTTP server for groonga.
### END INIT INFO

# Author: Kouhei Sutou <kou@clear-code.com>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="a HTTP server for groonga which provides full-text search engine and column store"
NAME=groonga-httpd
DAEMON=/usr/sbin/$NAME
DAEMON_RESTART=/usr/sbin/$NAME-restart
CURL=/usr/bin/curl
USER=groonga
GROUP=groonga
ADDRESS=127.0.0.1
PORT=10041
PIDFILE=/var/run/groonga/$NAME.pid
OLD_PIDFILE=/var/run/groonga/$NAME.pid.oldbin
SCRIPTNAME=/etc/init.d/$NAME
OPTION_ARGS=""
START_STOP_DAEMON_ARGS=""
ENABLE="no"
TIMEOUT=5

DEFAULT_FILE=/etc/default/groonga-httpd

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r $DEFAULT_FILE ] && . $DEFAULT_FILE

[ "$ENABLE" = "yes" ] || exit 0

mkdir -p $(dirname ${PIDFILE})

if [ -n "${USER}" ]; then
    if ! getent passwd | grep -q "^${USER}:"; then
	echo "$0: user for running groonga-httpd doesn't exist: ${USER}" >&2
	exit 1
    fi
fi
if [ -n "${GROUP}" ]; then
    if ! getent group | grep -q "^${GROUP}:"; then
	echo "$0: group for running groonga-httpd doesn't exist: ${GROUP}" >&2
	exit 1
    fi
fi
DAEMON_ARGS="${DAEMON_ARGS} ${OPTION_ARGS}"


# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

send_command()
{
    command=$1
    if [ "$command" = "status" ]; then
	$CURL --max-time $STATUS_TIMEOUT "http://${ADDRESS}:${PORT}/d/${command}"
    else
	$CURL "http://${ADDRESS}:${PORT}/d/${command}"
    fi
}

#
# Function that starts the daemon/service
#
do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON \
	${START_STOP_DAEMON_ARGS} --test > /dev/null || return 1
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON \
	${START_STOP_DAEMON_ARGS} -- $DAEMON_ARGS || return 2
    # Add code here, if necessary, that waits for the process to be ready
    # to handle requests from services started subsequently which depend
    # on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred

    $DAEMON -s stop

    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 \
	--pidfile $PIDFILE --name $NAME
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    # Wait for children to finish too if this is a daemon that forks
    # and if the daemon is only ever run from this initscript.
    # If the above conditions are not satisfied then add some other code
    # that waits for the process to drop all resources that could be
    # needed by services started subsequently.  A last resort is to
    # sleep for some time.
    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
    [ "$?" = 2 ] && return 2
    # Many daemons don't delete their pidfiles when they exit.
    rm -f $PIDFILE
    return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
    #
    # If the daemon can reload its configuration without
    # restarting (for example, when it is sent a SIGHUP),
    # then implement that here.
    #
    start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
    return 0
}

do_status() {
    send_command status
    return $?
}

case "$1" in
    start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
	    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
	    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
    stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
	    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
	    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
    reload|force-reload)
	log_daemon_msg "Reloading $DESC" "$NAME"
	do_reload
	log_end_msg $?
	;;
    restart)
	log_daemon_msg "Restarting $DESC" "$NAME"
	$DAEMON_RESTART
	case "$?" in
	    0) log_end_msg 0 ;;
	    *) log_end_msg 1 ;;
	esac
	;;
    status)
	do_status
	exit $?
	;;
    *)
	echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload|status}" >&2
	exit 3
	;;
esac

:
