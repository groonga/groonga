name: "Windows MSVC"
on:
  push:
    branches:
      - master
      - 'maintenance/**'
    tags:
      - '*'
  pull_request:
concurrency:
  group: ${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true
jobs:
  test:
    name: Test
    strategy:
      fail-fast: false
      matrix:
        label:
          - Visual Studio 2022 x64
          - Visual Studio 2019 x64
          - Visual Studio 2019 x86
        include:
          - label: Visual Studio 2022 x64
            architecture: x64
            cmake-architecture: x64
            cmake-generator: Visual Studio 17 2022
            runs-on: windows-2022
            vc-architecture: x64
            vc-toolset-version: 143
            vs-version: 2022
          - label: Visual Studio 2019 x64
            architecture: x64
            cmake-architecture: x64
            cmake-generator: Visual Studio 16 2019
            runs-on: windows-2019
            vc-architecture: x64
            vc-toolset-version: 142
            vs-version: 2019
          - label: Visual Studio 2019 x86
            architecture: x86
            cmake-architecture: Win32
            cmake-generator: Visual Studio 16 2019
            runs-on: windows-2019
            vc-architecture: x64_x86
            vc-toolset-version: 142
            vs-version: 2019
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Disable crash dialog
        run: |
          reg add "HKCU\SOFTWARE\Microsoft\Windows\Windows Error Reporting" `
            /v DontShowUI `
            /t REG_DWORD `
            /d 1 `
            /f
      - name: Use JST
        run: |
          Set-TimeZone -Id "Tokyo Standard Time"
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Download bundled packages
        run: |
          cd vendor
          ruby download_groonga_normalizer_mysql.rb
          ruby download_lz4.rb
          ruby download_mecab.rb
          ruby download_message_pack.rb
          ruby download_rapidjson.rb
          ruby download_xxhash.rb
      - name: Set environments
        id: env
        run: |
          Write-Output "CMAKE_BUILD_PARALLEL_LEVEL=${Env:NUMBER_OF_PROCESSORS}" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          $GROONGA_VERSION = (Get-Content base_version)
          if (!("${Env:GITHUB_REF}".StartsWith("refs/tags/"))) {
            $GROONGA_VERSION += "-$(${Env:GITHUB_SHA}.Substring(0, 7))"
          }
          Write-Output "GROONGA_VERSION=${GROONGA_VERSION}" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          $INSTALL_FOLDER = "groonga-${GROONGA_VERSION}-${{ matrix.architecture }}-vs${{ matrix.vs-version }}"
          $INSTALL_FOLDER_WITH_VCRUNTIME = "${INSTALL_FOLDER}-with-vcruntime"
          $INSTALL_PARENT_FOLDER = "install"
          $INSTALL_PARENT_FOLDER_WITH_VCRUNTIME = `
            "${INSTALL_PARENT_FOLDER}-with-vcruntime"
          $RELATIVE_INSTALL_FOLDER = "${INSTALL_PARENT_FOLDER}\${INSTALL_FOLDER}"
          $RELATIVE_INSTALL_FOLDER_WITH_VCRUNTIME = `
            "${INSTALL_PARENT_FOLDER_WITH_VCRUNTIME}\${INSTALL_FOLDER_WITH_VCRUNTIME}"
          $FULL_INSTALL_FOLDER = `
            "${Env:GITHUB_WORKSPACE}\${RELATIVE_INSTALL_FOLDER}"
          $FULL_INSTALL_FOLDER_WITH_VCRUNTIME = `
            "${Env:GITHUB_WORKSPACE}\${RELATIVE_INSTALL_FOLDER_WITH_VCRUNTIME}"
          Write-Output "INSTALL_FOLDER=${INSTALL_FOLDER}" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "INSTALL_FOLDER_WITH_VCRUNTIME=${INSTALL_FOLDER_WITH_VCRUNTIME}" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "FULL_INSTALL_FOLDER=${FULL_INSTALL_FOLDER}" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "FULL_INSTALL_FOLDER_WITH_VCRUNTIME=${FULL_INSTALL_FOLDER_WITH_VCRUNTIME}" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          if (${{ matrix.vs-version }} -ge 2022) {
            $VC_PREFIX = "C:\Program Files\Microsoft Visual Studio\${{ matrix.vs-version }}\Enterprise\VC"
          }
          else {
            $VC_PREFIX = "C:\Program Files (x86)\Microsoft Visual Studio\${{ matrix.vs-version }}\Enterprise\VC"
          }
          Write-Output "VC_PREFIX=${VC_PREFIX}" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - uses: actions/cache@v3
        with:
          path: |
            ccache
          key: source-${{ matrix.vs-version }}-${{ matrix.vc-architecture }}-ccache-${{ hashFiles('lib/**', 'src/**', 'plugins/**', 'include/**') }}
          restore-keys: source-${{ matrix.vs-version }}-${{ matrix.vc-architecture }}-ccache-
      - name: Prepare ccache
        run: |
          choco install ccache
          ccache --show-stats --verbose
          Write-Output "CMAKE_C_COMPILER_LAUNCHER=ccache" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "CMAKE_CXX_COMPILER_LAUNCHER=ccache" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Set version
        run: |
          "GRN_VERSION=${Env:GROONGA_VERSION}" | Set-Content version.sh
      - name: Install Apache Arrow
        if: |
          matrix.architecture == 'x64'
        run: |
          New-Item ..\apache-arrow-build -ItemType Directory
          $CMAKE_ARGS = (
            "-S", "vendor\apache-arrow-source\cpp",
            "-B", "..\apache-arrow-build",
            "-G", "${{ matrix.cmake-generator }}",
            "-DARROW_BUILD_STATIC=OFF",
            "-DARROW_COMPUTE=ON",
            "-DBOOST_SOURCE=BUNDLED",
            "-DCMAKE_BUILD_TYPE=Release",
            "-DCMAKE_INSTALL_PREFIX=${Env:FULL_INSTALL_FOLDER}",
            "-DCMAKE_UNITY_BUILD=ON"
          )
          if ("${{ matrix.cmake-architecture }}" -ne "") {
            $CMAKE_ARGS += ("-A", "${{ matrix.cmake-architecture }}")
          }
          cmake ${CMAKE_ARGS}
          cmake --build ..\apache-arrow-build --config Release --verbose
          cmake --build ..\apache-arrow-build --config Release --target Install
          ccache --show-stats --verbose
      - name: Install Groonga
        shell: cmd
        run: |
          call "%VC_PREFIX%\Auxiliary\Build\vcvarsall.bat" ${{ matrix.vc-architecture }}
          mkdir ..\groonga-build
          set CMAKE_ARGS=-S .
          set CMAKE_ARGS=%CMAKE_ARGS% -B ..\groonga-build
          if not "${{ matrix.cmake-architecture }}" == "" (
            set CMAKE_ARGS=%CMAKE_ARGS% -A ${{ matrix.cmake-architecture }}
          )
          set CMAKE_ARGS=%CMAKE_ARGS% -G "${{ matrix.cmake-generator }}"
          set CMAKE_ARGS=%CMAKE_ARGS% "-DCMAKE_INSTALL_PREFIX=%FULL_INSTALL_FOLDER%"
          set CMAKE_ARGS=%CMAKE_ARGS% -DCMAKE_BUILD_TYPE=RelWithDebInfo
          set CMAKE_ARGS=%CMAKE_ARGS% -DGRN_ALLOW_WARNING=ON
          if "${{ matrix.architecture }}" == "x64" (
            set CMAKE_ARGS=%CMAKE_ARGS% -DGRN_WITH_APACHE_ARROW=yes
          )
          set CMAKE_ARGS=%CMAKE_ARGS% -DGRN_WITH_MRUBY=yes
          set CMAKE_ARGS=%CMAKE_ARGS% -DGRN_WITH_XXHASH=bundled
          set CMAKE_ARGS=%CMAKE_ARGS% -DGRN_WITH_ZSTD=bundled
          cmake %CMAKE_ARGS%
          type ..\groonga-build\CMakeFiles\CMakeError.log
          cmake --build ..\groonga-build --config RelWithDebInfo --verbose
          cmake --build ..\groonga-build --config RelWithDebInfo --target Install
          ccache --show-stats --verbose
      - name: Install Groonga Admin
        run: |
          cd "${Env:FULL_INSTALL_FOLDER}\share\groonga\html"
          Move-Item admin admin.old
          Invoke-WebRequest `
            -Uri "https://packages.groonga.org/source/groonga-admin/groonga-admin.tar.gz" `
            -OutFile "groonga-admin.tar.gz"
          tar xf groonga-admin.tar.gz
          Remove-Item groonga-admin.tar.gz -Force
          Move-Item groonga-admin-*\html admin
          Remove-Item groonga-admin-*\source -Force -Recurse
          Move-Item groonga-admin-* ..\groonga-admin

      # Artifact
      - name: Compress the artifact without VC++ runtime
        run: |
          pushd "${Env:FULL_INSTALL_FOLDER}\.."
          Compress-Archive `
            -Path ${Env:INSTALL_FOLDER} `
            -DestinationPath "${Env:FULL_INSTALL_FOLDER}.zip"
          popd
          Copy-Item `
            "${Env:FULL_INSTALL_FOLDER}.zip" `
            "${Env:INSTALL_FOLDER}.zip"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.INSTALL_FOLDER }}
          path: ${{ env.INSTALL_FOLDER }}.zip
      - name: Prepare artifacts with VC++ runtime
        run: |
          Set-PSDebug -Trace 2

          New-Item `
            -Path "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}\.." `
            -ItemType Directory
          Copy-Item -Recurse `
             "${Env:FULL_INSTALL_FOLDER}" `
             "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}"
          $GROONGA_VC_REDIST_LICENSE_DIR = `
            "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}\share\groonga\vcruntime"
          New-Item `
            -Path "${GROONGA_VC_REDIST_LICENSE_DIR}" `
            -ItemType Directory

          $VC_REDIST_VERSION = (Get-Content "${Env:VC_PREFIX}\Auxiliary\Build\Microsoft.VCRedistVersion.default.txt")
          $VC_REDIST_DIR = "${Env:VC_PREFIX}\Redist\MSVC\${VC_REDIST_VERSION}\${{ matrix.architecture }}\Microsoft.VC${{ matrix.vc-toolset-version }}.CRT"
          $VC_REDIST_VCRUNTIME = "${VC_REDIST_DIR}\vcruntime140.dll"
          $VC_REDIST_VCRUNTIME_1 = "${VC_REDIST_DIR}\vcruntime140_1.dll"
          $VC_REDIST_MSVCP = "${VC_REDIST_DIR}\msvcp140.dll"
          Copy-Item `
            ${VC_REDIST_VCRUNTIME} `
            "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}\bin"
          if (Test-Path ${VC_REDIST_VCRUNTIME_1}) {
            Copy-Item `
              ${VC_REDIST_VCRUNTIME_1} `
              "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}\bin"
          }
          Copy-Item `
            ${VC_REDIST_MSVCP} `
            "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}\bin"
          Copy-Item `
            "${Env:GITHUB_WORKSPACE}\packages\windows\vcruntime\vs${{ matrix.vs-version }}\readme.txt" `
            ${GROONGA_VC_REDIST_LICENSE_DIR}

          $UCRT_REDIST_DIR = "C:\Program Files (x86)\Windows Kits\10\Redist\ucrt\DLLs\${{ matrix.architecture }}"
          Copy-Item `
            "${UCRT_REDIST_DIR}\*.dll" `
            "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}\bin"
          Copy-Item `
            "${Env:GITHUB_WORKSPACE}\packages\windows\vcruntime\ucrt-readme.txt" `
            ${GROONGA_VC_REDIST_LICENSE_DIR}
      - name: Compress the artifact with VC++ runtime
        run: |
          pushd "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}\.."
          Compress-Archive `
            -Path ${Env:INSTALL_FOLDER_WITH_VCRUNTIME} `
            -DestinationPath "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}.zip"
          popd
          Copy-Item `
            "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}.zip" `
            "${Env:INSTALL_FOLDER_WITH_VCRUNTIME}.zip"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.INSTALL_FOLDER_WITH_VCRUNTIME }}
          path: ${{ env.INSTALL_FOLDER_WITH_VCRUNTIME }}.zip

      # Release
      - name: Upload the artifacts to release
        uses: softprops/action-gh-release@v1
        if: |
          startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${{ env.INSTALL_FOLDER }}.zip
            ${{ env.INSTALL_FOLDER_WITH_VCRUNTIME }}.zip

      # Test
      - name: Update MSYS2
        run: |
          ridk exec pacman --sync --refresh --sysupgrade --sysupgrade --noconfirm
          taskkill /F /FI "MODULES eq msys-2.0.dll"
          ridk exec pacman --sync --refresh
      - name: Update GCC
        run: |
          ridk exec pacman --sync --noconfirm mingw-w64-ucrt-x86_64-gcc
      - name: Install grntest
        run: |
          git clone --depth 1 `
            https://github.com/groonga/grntest.git `
            ..\grntest
          cd ..\grntest
          bundle install
          bundle exec ruby -rdevkit -S rake install
      - name: Install Red Arrow
        if: |
          matrix.architecture == 'x64'
        run: |
          ridk exec pacman --sync --noconfirm mingw-w64-ucrt-x86_64-arrow
          $Env:MAKEFLAGS = "-j${Env:NUMBER_OF_PROCESSORS}"
          gem install red-arrow
      - name: "Test: command line"
        run: |
          ruby test\command_line\run-test.rb `
            --groonga-install-prefix="${Env:FULL_INSTALL_FOLDER}"
      - name: "Test: HTTP: reference count"
        run: |
          $Env:GRN_ENABLE_REFERENCE_COUNT = "yes"
          grntest `
            --base-directory test\command `
            --groonga "${Env:FULL_INSTALL_FOLDER}\bin\groonga.exe" `
            --interface http `
            --n-retries 2 `
            --n-workers ${Env:NUMBER_OF_PROCESSORS} `
            --read-timeout=30 `
            --reporter mark `
            --timeout 60 `
            test\command\suite
      - name: "Test: HTTP: Apache Arrow: chunked"
        if: |
          matrix.architecture == 'x64'
        run: |
          grntest `
            --base-directory test\command `
            --groonga "${Env:FULL_INSTALL_FOLDER}\bin\groonga.exe" `
            --input-type apache-arrow `
            --interface http `
            --n-retries 2 `
            --n-workers ${Env:NUMBER_OF_PROCESSORS} `
            --read-timeout=30 `
            --reporter mark `
            --timeout 360 `
            --use-http-chunked `
            test\command\suite
