name: Linux
on:
  push:
    branches:
      - master
      - 'maintenance/**'
    tags:
      - '*'
  pull_request:
concurrency:
  group: ${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true
jobs:
  autotools:
    name: Autotools
    strategy:
      fail-fast: false
      matrix:
        label:
          - "GCC"
          - "GCC: mruby"
          - "GCC: mruby: Apache Arrow RC"
          - "Clang: mruby"
        include:
          - label: "GCC"
            id: autotools-gcc
            configure-options: >-
              CFLAGS=-funsigned-char
              CXXFLAGS=-funsigned-char
          - label: "GCC: mruby"
            id: autotools-gcc-mruby
            use-mruby: true
          - label: "GCC: mruby: Apache Arrow RC"
            id: autotools-gcc-mruby-apache-arrow-rc
            use-mruby: true
            use-apache-arrow-rc: true
          - label: "Clang: mruby"
            id: autotools-clang-mruby
            use-mruby: true
            packages: >-
              clang
            configure-options: >-
              CC=clang
              CXX=clang++
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Enable Apache Arrow repository
        run: |
          sudo apt update
          sudo apt install -y -V \
            lsb-release \
            wget
          if [ "${{ matrix.use-apache-arrow-rc }}" = "true" ]; then
            wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')-rc/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
            sudo apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
            sudo sed \
              -i"" \
              -e "s,^URIs: \\(.*\\)/,URIs: \\1-rc/,g" \
              /etc/apt/sources.list.d/apache-arrow.sources
          else
            wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
            sudo apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
          fi
      - name: Install packages
        run: |
          sudo apt update
          sudo apt install -y -V \
            autoconf-archive \
            automake1.11 \
            autotools-dev \
            ccache \
            cmake \
            gdb \
            gettext \
            libarrow-dev \
            libevent-dev \
            libluajit-5.1-dev \
            liblz4-dev \
            libmecab-dev \
            libmsgpack-dev \
            libstemmer-dev \
            libxxhash-dev \
            libzstd-dev \
            mecab-naist-jdic \
            rapidjson-dev \
            ruby-dev \
            zlib1g-dev \
            ${{ matrix.packages }}
          if [ "${{ matrix.use-sphinx }}" = "true" ]; then
            sudo apt install -y -V \
              python3-pip
          fi
          echo "/usr/lib/ccache" >> $GITHUB_PATH
      - name: Cache ccache
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: source-${{ matrix.id }}-ccache-${{ hashFiles('lib/**', 'src/**', 'plugins/**', 'include/**') }}
          restore-keys: source-${{ matrix.id }}-ccache-
      - name: Install Cutter
        run: |
          curl \
            --silent \
            --location \
            https://raw.github.com/clear-code/cutter/master/data/travis/setup.sh | sh
      - name: Install Sphinx
        if: |
          matrix.use-sphinx
        run: |
          sudo pip3 install -U \
            Jinja2 \
            "Sphinx==5.3.0" \
            pydata_sphinx_theme
      - name: Install Bundler
        run: |
          sudo gem install bundler
      - name: Generate configure
        run: |
          ./autogen.sh
      - name: Configure
        run: |
          configure_args=()
          if [ "${{ matrix.use-mruby }}" = "true" ]; then
            configure_args+=(--enable-mruby)
          fi
          ./configure \
            --enable-debug \
            --prefix=$PWD/install \
            --with-ruby \
            "${configure_args[@]}" \
            ${{ matrix.configure-options }}
      - name: Build
        run: |
          make -j$(nproc)
      - name: "Test: API"
        run: |
          bash -x test/unit/run-test.sh
      - name: Install test dependencies
        run: |
          sudo env MAKEFLAGS=-j$(nproc) gem install \
            groonga-client \
            json \
            native-package-installer \
            pkg-config
      - name: "Test: mruby"
        if: |
          matrix.use-mruby
        run: |
          bash -x test/mruby/run-test.sh
      - name: Install
        run: |
          make install
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.id }}
          path: install/

  cmake:
    name: CMake
    strategy:
      fail-fast: false
      matrix:
        label:
          - "GCC"
          - "Clang"
        include:
          - label: "GCC"
            id: cmake-gcc
            cc: gcc
            cxx: g++
          - label: "Clang"
            id: cmake-clang
            cc: clang
            cxx: clang++
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Enable Apache Arrow repository
        run: |
          sudo apt update
          sudo apt install -y -V \
            lsb-release \
            wget
          wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
          sudo apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
      - name: Install packages
        run: |
          sudo apt update
          sudo apt install -y -V \
            cmake \
            gdb \
            gettext \
            libarrow-dev \
            libevent-dev \
            libluajit-5.1-dev \
            liblz4-dev \
            libmecab-dev \
            libmsgpack-dev \
            libstemmer-dev \
            libxxhash-dev \
            libzstd-dev \
            mecab-naist-jdic \
            ninja-build \
            rapidjson-dev \
            ruby-dev \
            zlib1g-dev
      - name: Install Bundler
        run: |
          sudo gem install bundler
      - name: CMake
        run: |
          export CC=${{ matrix.cc }}
          export CXX=${{ matrix.cxx }}
          cmake \
            -B ../groonga.build \
            -S . \
            -GNinja \
            -DCMAKE_INSTALL_PREFIX=$PWD/install \
            -DCMAKE_BUILD_TYPE=Debug \
            -DGRN_ALLOW_WARNING=OFF \
            -DGRN_WITH_APACHE_ARROW=yes \
            -DGRN_WITH_MRUBY=yes
      - name: Build
        run: |
          ninja -C ../groonga.build
      - name: Install
        run: |
          ninja -C ../groonga.build install
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.id }}
          path: install/

  test:
    name: Test
    needs:
      - autotools
      - cmake
    strategy:
      fail-fast: false
      matrix:
        label:
          - "Autotools: GCC"
          - "Autotools: GCC: mruby"
          - "Autotools: GCC: mruby: optimize"
          - "Autotools: GCC: mruby: Apache Arrow RC"
          - "Autotools: Clang: mruby"
          - "CMake: GCC"
          - "CMake: Clang"
        include:
          - label: "Autotools: GCC"
            id: autotools-gcc
          - label: "Autotools: GCC: mruby"
            id: autotools-gcc-mruby
          - label: "Autotools: GCC: mruby: optimize"
            id: autotools-gcc-mruby
            optimize: true
          - label: "Autotools: GCC: mruby: Apache Arrow RC"
            id: autotools-gcc-mruby-apache-arrow-rc
            use-apache-arrow-rc: true
          - label: "Autotools: Clang: mruby"
            id: autotools-clang-mruby
          - label: "CMake: GCC"
            id: cmake-gcc
          - label: "CMake: Clang"
            id: cmake-clang
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.id }}
          path: install/
      - name: Set executable bit
        run: |
          chmod +x install/bin/*
      - name: Enable Apache Arrow repository
        run: |
          sudo apt update
          sudo apt install -y -V \
            lsb-release \
            wget
          if [ "${{ matrix.use-apache-arrow-rc }}" = "true" ]; then
            wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')-rc/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
            sudo apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
            sudo sed \
              -i"" \
              -e "s,^URIs: \\(.*\\)/,URIs: \\1-rc/,g" \
              /etc/apt/sources.list.d/apache-arrow.sources
          else
            wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
            sudo apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
          fi
          sudo apt update
      - name: Install test dependencies
        run: |
          sudo env MAKEFLAGS=-j$(nproc) gem install \
            grntest \
            pkg-config \
            red-arrow

          # No -dev version is OK but specifying shared object version
          # in package name bothers us...
          sudo apt install -y -V \
            libevent-dev \
            libluajit-5.1-dev \
            liblz4-dev \
            libmecab-dev \
            libmsgpack-dev \
            libstemmer-dev \
            libxxhash-dev \
            libzstd-dev \
            mecab-naist-jdic \
            zlib1g-dev
      - name: Set environment variables
        run: |
          echo "COLUMNS=79" >> ${GITHUB_ENV}
          if [ "${{ matrix.optimize }}" = "true" ]; then
            echo "GRN_EXPR_OPTIMIZE=yes" >> ${GITHUB_ENV}
          fi
          echo "LD_LIBRARY_PATH=$PWD/install/lib" >> ${GITHUB_ENV}
          echo "TZ=Asia/Tokyo" >> ${GITHUB_ENV}

          echo "$PWD/install/bin" >> ${GITHUB_PATH}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/red-datasets
          key: red-datasets-ubuntu
      - name: "Test: command line"
        run: |
          if type grndb; then
            test/command_line/run-test.rb --groonga-install-prefix=$PWD/install
          fi
      - name: "Test: stdio"
        run: |
          grntest \
            --base-dir test/command \
            --n-retries=3 \
            --read-timeout=30 \
            --reporter=mark \
            test/command/suite
      - name: "Test: stdio: n_workers"
        run: |
          export GRN_SELECT_N_WORKERS_DEFAULT=-1
          grntest \
            --base-dir test/command \
            --n-retries=3 \
            --read-timeout=30 \
            --reporter=mark \
            test/command/suite
      - name: "Test: HTTP: load: Apache Arrow"
        run: |
          grntest \
            --base-dir test/command \
            --n-retries=3 \
            --read-timeout=30 \
            --reporter=mark \
            --input-type=apache-arrow \
            --interface=http \
            test/command/suite
      - name: "Test: HTTP: command: POST"
        run: |
          grntest \
            --base-dir test/command \
            --n-retries=3 \
            --read-timeout=30 \
            --reporter=mark \
            --input-type=apache-arrow \
            --interface=http \
            --use-http-post \
            test/command/suite
      - name: "Test: HTTP: command: chunked"
        run: |
          grntest \
            --base-dir test/command \
            --n-retries=3 \
            --timeout=10 \
            --read-timeout=30 \
            --reporter=mark \
            --input-type=apache-arrow \
            --interface=http \
            --use-http-chunked \
            test/command/suite
      - name: "Test: HTTP: groonga-httpd"
        run: |
          if type groonga-httpd; then
            mkdir -p $PWD/install/var/log/groonga/httpd/
            grntest \
              --base-dir test/command \
              --n-retries=3 \
              --read-timeout=30 \
              --reporter=mark \
              --testee groonga-httpd \
              test/command/suite
          fi
      - name: "Test: HTTP: reference count"
        run: |
          export GRN_ENABLE_REFERENCE_COUNT=yes
          grntest \
            --base-dir test/command \
            --n-retries=3 \
            --read-timeout=30 \
            --reporter=mark \
            --interface=http \
            test/command/suite
