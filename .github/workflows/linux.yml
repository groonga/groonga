name: Linux
on:
  push:
    branches:
      - master
      - 'maintenance/**'
    tags:
      - '*'
  pull_request:
concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}
jobs:
  autotools:
    name: Autotools
    strategy:
      fail-fast: false
      matrix:
        label:
          - "GCC"
          - "GCC: mruby"
          - "GCC: mruby: optimize"
          - "Clang: mruby"
        include:
          - label: "GCC"
            configure-options: >-
              CFLAGS=-funsigned-char
              CXXFLAGS=-funsigned-char
          - label: "GCC: mruby"
            use-mruby: true
          - label: "GCC: mruby: optimize"
            use-mruby: true
            optimize: true
          - label: "Clang: mruby"
            use-mruby: true
            packages: >-
              clang
            configure-options: >-
              CC=clang
              CXX=clang++
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Enable Apache Arrow repository
        run: |
          sudo apt update
          sudo apt install -y -V \
            lsb-release \
            wget
          wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
          sudo apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
      - name: Install packages
        run: |
          sudo apt update
          sudo apt install -y -V \
            autoconf-archive \
            automake1.11 \
            autotools-dev \
            cmake \
            gdb \
            gettext \
            libarrow-dev \
            libevent-dev \
            libluajit-5.1-dev \
            liblz4-dev \
            libmecab-dev \
            libmsgpack-dev \
            libstemmer-dev \
            libxxhash-dev \
            libzstd-dev \
            mecab-naist-jdic \
            rapidjson-dev \
            ruby-dev \
            zlib1g-dev \
            ${{ matrix.packages }}
          if [ "${{ matrix.use-sphinx }}" = "true" ]; then
            sudo apt install -y -V \
              python3-pip
          fi
      - name: Install Cutter
        run: |
          curl \
            --silent \
            --location \
            https://raw.github.com/clear-code/cutter/master/data/travis/setup.sh | sh
      - name: Install Sphinx
        if: |
          matrix.use-sphinx
        run: |
          sudo pip3 install Sphinx
      - name: Install Bundler
        run: |
          sudo gem install bundler
      - name: Generate configure
        run: |
          ./autogen.sh
      - name: Configure
        run: |
          configure_args=()
          if [ "${{ matrix.use-mruby }}" = "true" ]; then
            configure_args+=(--enable-mruby)
          fi
          ./configure \
            --enable-debug \
            --prefix=/tmp/local \
            --with-ruby \
            "${configure_args[@]}" \
            ${{ matrix.configure-options }}
      - name: Build
        run: |
          make -j$(nproc)
      - name: Install test dependencies
        run: |
          sudo env MAKEFLAGS=-j$(nproc) gem install \
            groonga-client \
            groonga-synonym \
            json \
            pkg-config \
            red-arrow
      - name: Set environment variables
        run: |
          echo "COLUMNS=79" >> ${GITHUB_ENV}
          if [ "${{ matrix.optimize }}" = "true" ]; then
            echo "GRN_EXPR_OPTIMIZE=yes" >> ${GITHUB_ENV}
          fi
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/red-datasets
          key: red-datasets-ubuntu
      - name: "Test: API"
        run: |
          bash -x test/unit/run-test.sh
      - name: "Test: mruby"
        if: |
          matrix.use-mruby
        run: |
          bash -x test/mruby/run-test.sh
      - name: "Test: command line"
        if: |
          matrix.use-mruby
        run: |
          test/command_line/run-test.rb
      - name: "Test: stdio"
        run: |
          bash -x test/command/run-test.sh \
            --n-retries=3 \
            --read-timeout=30 \
            --reporter=mark
      - name: "Test: HTTP: load: Apache Arrow"
        run: |
          bash -x test/command/run-test.sh \
            --n-retries=3 \
            --read-timeout=30 \
            --reporter=mark \
            --input-type=apache-arrow \
            --interface=http
      - name: "Test: HTTP: command: POST"
        run: |
          bash -x test/command/run-test.sh \
            --n-retries=3 \
            --read-timeout=30 \
            --reporter=mark \
            --interface=http \
            --use-http-post
      - name: "Test: HTTP: command: chunked"
        run: |
          bash -x test/command/run-test.sh \
            --n-retries=3 \
            --read-timeout=30 \
            --reporter=mark \
            --interface=http \
            --use-http-chunked
      - name: "Test: HTTP: groonga-httpd"
        run: |
          mkdir -p /tmp/local/var/log/groonga/httpd/
          bash -x test/command/run-test.sh \
            --n-retries=3 \
            --read-timeout=30 \
            --reporter=mark \
            --testee groonga-httpd
      - name: "Test: HTTP: reference count"
        run: |
          export GRN_ENABLE_REFERENCE_COUNT=yes
          bash -x test/command/run-test.sh \
            --n-retries=3 \
            --read-timeout=30 \
            --reporter=mark \
            --interface=http
      - name: Install
        run: |
          make install
