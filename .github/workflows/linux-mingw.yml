name: Linux MinGW
on:
  - push
  - pull_request
jobs:
  package:
    name: Package
    strategy:
      fail-fast: false
      matrix:
        architecture:
          - x86
          - x64
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install packages
        run: |
          sudo apt update
          sudo apt install -y -V \
            autoconf-archive \
            automake1.11 \
            autotools-dev \
            bison \
            cmake \
            gettext \
            libevent-dev \
            libluajit-5.1-dev \
            libmecab-dev \
            libmsgpack-dev \
            libxxhash-dev \
            mecab-naist-jdic \
            nsis \
            python3-pip \
            rapidjson-dev \
            ruby-dev \
            zip \
            zlib1g-dev
      - name: Install Sphinx
        run: |
          sudo pip3 install Sphinx
      - name: Generate configure
        run: |
          ./autogen.sh
      - name: Apply a patch
        run: |
          patch -p1 < packages/source/patches/mruby-do-not-check-fd-for-stdin-stdout-stderr.diff
      - name: Configure
        run: |
          ./configure \
            --enable-debug \
            --enable-document \
            --enable-mruby \
            --with-ruby
      - name: Build archive
        run: |
          make dist
      - name: Build
        run: |
          make \
            -C packages/windows \
            ARCHITECTURES=${{ matrix.architecture }} \
            build
      - name: Build zip archive
        run: |
          make \
            -C packages/windows \
            ARCHITECTURES=${{ matrix.architecture }} \
            package
      - name: Build installer
        run: |
          make \
            -C packages/windows \
            installer-${{ matrix.architecture }}

      # Artifact
      - name: Prepare artifacts
        run: |
          mkdir -p windows-mingw-${{ matrix.architecture }}
          mv packages/windows/files/* windows-mingw-${{ matrix.architecture }}/
          mv packages/windows/source windows-mingw-${{ matrix.architecture }}/
      - uses: actions/upload-artifact@v2
        with:
          name: windows-mingw-${{ matrix.architecture }}
          path: windows-mingw-${{ matrix.architecture }}
  pdb:
    name: PDB
    needs:
      - package
    strategy:
      fail-fast: false
      matrix:
        architecture:
          - x86
          - x64
    runs-on: windows-2019
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: windows-mingw-${{ matrix.architecture }}
      - name: Generate PDB
        run: |
          New-Item `
            -Type Directory `
            windows-mingw-with-pdb-${{ matrix.architecture }}
          $ZIP_ITEM = $(Get-ChildItem . -Filter *.zip)[0]
          Expand-Archive ${ZIP_ITEM} .
          pushd ${ZIP_ITEM}.BaseName
          bin\generate-pdb.bat
          popd
          Compress-Archive `
            ${ZIP_ITEM}.BaseName `
            windows-mingw-with-pdb-${{ matrix.architecture }}\$(${ZIP_ITEM}.Name)
      - uses: actions/upload-artifact@v2
        with:
          name: windows-mingw-with-pdb-${{ matrix.architecture }}
          path: windows-mingw-with-pdb-${{ matrix.architecture }}
  test:
    name: Test
    needs:
      - pdb
    strategy:
      fail-fast: false
      matrix:
        architecture:
          - x86
          - x64
    runs-on: windows-2019
    steps:
      - name: Disable crash dialog
        run: |
          reg add "HKCU\SOFTWARE\Microsoft\Windows\Windows Error Reporting" `
            /v DontShowUI `
            /t REG_DWORD `
            /d 1 `
            /f
      - name: Use JST
        run: |
          Set-TimeZone -Id "Tokyo Standard Time"
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: windows-mingw-with-pdb-${{ matrix.architecture }}
          path: windows-mingw-with-pdb-${{ matrix.architecture }}
      - name: Extract
        run: |
          $ZIP_ITEM = $(Get-ChildItem windows-mingw-with-pdb-${{ matrix.architecture }} -Filter *.zip)[0]
          Expand-Archive ${ZIP_ITEM} .
          $INSTALL_FOLDER = "groonga"
          Move-Item groonga-* ${INSTALL_FOLDER}
          Write-Output "INSTALL_FOLDER=${INSTALL_FOLDER}" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $FULL_INSTALL_FOLDER = "$(Get-Location)\${INSTALL_FOLDER}"
          Write-Output "FULL_INSTALL_FOLDER=${FULL_INSTALL_FOLDER}" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - uses: actions/setup-ruby@v1
      - name: Update MSYS2 keyring
        run: |
          # https://www.msys2.org/news/#2020-06-29-new-packagers
          $baseURL = "https://repo.msys2.org/msys"
          # mirror. sf.net requires downloader related user-agent such
          # as wget or curl.
          $baseURL = "https://sourceforge.net/projects/msys2/files/REPOS/MSYS2"
          Invoke-WebRequest `
            -Uri "${baseURL}/x86_64/msys2-keyring-r21.b39fb11-1-any.pkg.tar.xz" `
            -OutFile msys2-keyring-r21.b39fb11-1-any.pkg.tar.xz `
            -UserAgent wget
          ridk exec pacman `
            --noconfirm `
            --upgrade `
            msys2-keyring-r21.b39fb11-1-any.pkg.tar.xz
      - name: Update MSYS2
        run: |
          ridk exec pacman --sync --refresh --sysupgrade --noconfirm
          taskkill /F /FI "MODULES eq msys-2.0.dll"
      - name: Update GCC
        run: |
          ridk exec pacman --sync --noconfirm mingw-w64-x86_64-gcc
      - name: Install grntest
        run: |
          git clone --depth 1 `
            https://github.com/groonga/grntest.git `
            ..\grntest
          cd ..\grntest
          bundle install
          bundle exec ruby -rdevkit -S rake install
      - name: Disable tests not for x86
        if: |
          matrix.architecture == 'x86'
        run: |
          Remove-Item test\command\suite\ruby\eval\convert\string_to_time\over_int32.test
          # Float32 value format is different.
          Remove-Item test\command\suite\tokenizers\document_vector_tf_idf\alphabet.test
          Remove-Item test\command\suite\tokenizers\document_vector_tf_idf\reindex.test
          Remove-Item test\command\suite\tokenizers\document_vector_bm25\alphabet.test
          Remove-Item test\command\suite\tokenizers\document_vector_bm25\normalize_false.test
          Remove-Item test\command\suite\tokenizers\document_vector_bm25\reindex.test
      - name: Disable tests that require xxHash
        run: |
          Remove-Item test\command\suite\select\drilldowns\keys\multiple_large.test
      - name: "Test: command line"
        run: |
          ruby test\command_line\run-test.rb `
            --groonga-install-prefix="${Env:INSTALL_FOLDER}"
      - name: "Test: HTTP: reference count"
        run: |
          $Env:GRN_ENABLE_REFERENCE_COUNT = "yes"
          grntest `
            --base-directory test\command `
            --groonga "${Env:FULL_INSTALL_FOLDER}\bin\groonga.exe" `
            --interface http `
            --n-retries 2 `
            --n-workers ${Env:NUMBER_OF_PROCESSORS} `
            --read-timeout=30 `
            --reporter mark `
            --timeout 60 `
            test\command\suite
  release:
    name: Release
    needs:
      - pdb
    strategy:
      fail-fast: false
      matrix:
        architecture:
          - x86
          - x64
    runs-on: ubuntu-latest
    if: |
      startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: windows-mingw-${{ matrix.architecture }}
          path: windows-mingw-${{ matrix.architecture }}
      - uses: actions/download-artifact@v2
        with:
          name: windows-mingw-with-pdb-${{ matrix.architecture }}
          path: windows-mingw-with-pdb-${{ matrix.architecture }}
      - name: Asset
        id: asset
        run: |
          sudo apt update
          sudo apt install -y -V zip
          version=$(echo ${{ github.ref }} | sed -e 's,^refs/tags/v,,')
          echo ::set-output name=version::${version}
          base_name=groonga-${version}-${{ matrix.architecture }}
          echo ::set-output name=base_name::${base_name}
          source_dir_name=groonga-${version}
          source_zip_name=${source_dir_name}.zip
          echo ::set-output name=source_zip_name::${source_zip_name}
          mv windows-mingw-${{ matrix.architecture }}/source ${source_dir_name}
          zip -r ${source_zip_name} ${source_dir_name}
      - name: Ensure creating release
        id: create-release
        uses: actions/github-script@0.4.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const AsyncFunction = Object.getPrototypeOf(async () => {}).constructor
            const fs = require("fs");
            const path = ".github/workflows/ensure-creating-release.js";
            const script = fs.readFileSync(path).toString();
            const func = new AsyncFunction("require", "github", "context", script);
            return await func(require, github, context);
      - name: Upload zip to release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.result }}
          asset_path: windows-mingw-with-pdb-${{ matrix.architecture }}/${{ steps.asset.outputs.base_name }}.zip
          asset_name: ${{ steps.asset.outputs.base_name }}.zip
          asset_content_type: application/zip
      - name: Upload source to release
        if: |
          matrix.architecture == 'x64'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.result }}
          asset_path: ${{ steps.asset.outputs.source_zip_name }}
          asset_name: ${{ steps.asset.outputs.source_zip_name }}
          asset_content_type: application/zip
      - name: Upload installer to release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.result }}
          asset_path: windows-mingw-${{ matrix.architecture }}/${{ steps.asset.outputs.base_name }}.exe
          asset_name: ${{ steps.asset.outputs.base_name }}.exe
          asset_content_type: application/x-msdos-program
