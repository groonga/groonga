name: "Windows MinGW"
on:
  push:
    branches:
      - master
      - 'maintenance/**'
      - ci-mingw
    tags:
      - '*'
  pull_request:
concurrency:
  group: ${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true
jobs:
  test:
    name: ${{ matrix.msystem }}
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        include:
          - msystem: MINGW64
            package-prefix: mingw-w64-x86_64
          - msystem: MINGW32
            package-prefix: mingw-w64-i686
          - msystem: UCRT64
            package-prefix: mingw-w64-ucrt-x86_64
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/checkout@v2
        with:
          repository: msys2/MINGW-packages
          path: ci/msys2/MINGW-packages
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          update: true
          install: >-
            ${{ matrix.package-prefix }}-toolchain
            base-devel
            binutils
            git
            msys2-devel
            pactoys
      - name: Prepare
        shell: msys2 {0}
        run: |
          set -ex
          cd ci/msys2
          source MINGW-packages/.ci/ci-library.sh
          sed -i'' -e 's/^CheckSpace/#CheckSpace/g' /etc/pacman.conf
          MINGW-packages/.ci/fetch-validpgpkeys.sh
      - name: Build
        shell: msys2 {0}
        run: |
          set -ex
          version=$(cat base_version)
          ./build-archive.sh
          mv groonga-${version}.tar.gz ci/msys2/
          cd ci/msys2
          sed -i'' -e "s/^pkgver=/pkgver=${version}/" PKGBUILD
          MINGW_ARCH=${{ matrix.msystem }} \
            makepkg-mingw \
              --cleanbuild \
              --nocheck \
              --noconfirm \
              --noprogressbar \
              --rmdeps \
              --syncdeps
      - name: Install
        shell: msys2 {0}
        run: |
          set -ex
          cd ci/msys2
          pacman \
            --noconfirm \
            --noprogressbar \
            --upgrade \
            *.pkg.tar.*
          cp -a *.pkg.tar.* ../../

      # Artifact
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.msystem }}
          path: "*.pkg.tar.*"

      # Test
      - name: Use JST
        run: |
          Set-TimeZone -Id "Tokyo Standard Time"
      - uses: actions/checkout@v2
        with:
          repository: groonga/grntest
          path: grntest
      - name: Install grntest
        shell: msys2 {0}
        run: |
          pacman --sync --needed --noconfirm ${{ matrix.package-prefix }}-ruby
          # Ensure using the installed system libffi
          gem install fiddle
          gem install bundler
          cd grntest
          bundle install
          bundle exec rake install
      - name: Install red-arrow
        shell: msys2 {0}
        run: |
          MAKEFLAGS=-j$(nproc) gem install red-arrow
          ruby -e "require 'arrow'"
      - name: Prepare setup-extpp.rb
        shell: msys2 {0}
        run: |
          cat <<RUBY > setup-extpp.rb
          ["extpp"].each do |gem|
            spec = Gem::Specification.find_by_name(gem)
            ENV["PATH"] = [
              File.join(spec.full_gem_path, "lib"),
              ENV["PATH"],
            ].join(File::PATH_SEPARATOR)
          end
          RUBY
      - name: "Test: command line"
        shell: msys2 {0}
        run: |
          ruby test/command_line/run-test.rb
      - name: Remove tests not for 32bit environment
        if: |
          matrix.msystem == 'MINGW32'
        shell: msys2 {0}
        run: |
          rm test/command/suite/ruby/eval/convert/string_to_time/over_int32.test
          rm test/command/suite/tokenizers/document_vector_tf_idf/alphabet.test
          rm test/command/suite/tokenizers/document_vector_tf_idf/reindex.test
          rm test/command/suite/tokenizers/document_vector_tf_idf/token_column.test
          rm test/command/suite/tokenizers/document_vector_tf_idf/token_column_different_lexicon.test
          rm test/command/suite/tokenizers/document_vector_bm25/alphabet.test
          rm test/command/suite/tokenizers/document_vector_bm25/normalize_false.test
          rm test/command/suite/tokenizers/document_vector_bm25/reindex.test
      - name: "Test: HTTP: reference count"
        shell: msys2 {0}
        run: |
          export GRN_ENABLE_REFERENCE_COUNT=yes
          ruby \
            -r./setup-extpp \
            -S \
              grntest \
                --base-directory=test/command \
                --interface=http \
                --n-retries=2 \
                --n-workers=${NUMBER_OF_PROCESSORS} \
                --read-timeout=30 \
                --reporter=mark \
                --timeout=60 \
                test/command/suite
      - name: "Test: HTTP: Apache Arrow: chunked"
        shell: msys2 {0}
        run: |
          ruby \
            -r./setup-extpp \
            -S \
              grntest \
                --base-directory=test/command \
                --input-type=apache-arrow \
                --interface=http \
                --n-retries=2 \
                --n-workers=${NUMBER_OF_PROCESSORS} \
                --read-timeout=30 \
                --reporter=mark \
                --timeout=360 \
                --use-http-chunked \
                test/command/suite
