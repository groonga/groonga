name: Package
on:
  push:
  pull_request:
  schedule:
    - cron: |
        0 0 * * *
jobs:
  build:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        label:
          - Debian GNU/Linux bullseye amd64
          - Debian GNU/Linux bullseye arm64
          - Debian GNU/Linux buster amd64
          - Debian GNU/Linux buster arm64
          - Debian GNU/Linux buster i386
          - CentOS 7
          - CentOS 8
        include:
          - label: Debian GNU/Linux bullseye amd64
            id: debian-bullseye-amd64
            task-namespace: apt
            target: debian-bullseye
            test-docker-image: debian:bullseye
          - label: Debian GNU/Linux bullseye arm64
            id: debian-bullseye-arm64
            task-namespace: apt
            target: debian-bullseye-arm64
            test-docker-image: arm64v8/debian:bullseye
          - label: Debian GNU/Linux buster amd64
            id: debian-buster-amd64
            task-namespace: apt
            target: debian-buster
            test-docker-image: debian:buster
          - label: Debian GNU/Linux buster arm64
            id: debian-buster-arm64
            task-namespace: apt
            target: debian-buster-arm64
            test-docker-image: arm64v8/debian:buster
          - label: Debian GNU/Linux buster i386
            id: debian-buster-i386
            task-namespace: apt
            target: debian-buster-i386
            test-docker-image: i386/debian:buster
          - label: CentOS 7
            id: centos-7
            task-namespace: yum
            target: centos-7
            test-docker-image: centos:7
          - label: CentOS 8
            id: centos-8
            task-namespace: yum
            target: centos-8
            test-docker-image: centos:8
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt -V install \
            autoconf-archive \
            devscripts \
            python3-pip \
            ruby
      # qemu-user-static in Ubuntu 20.04 has the following bug.
      # https://bugs.launchpad.net/qemu/+bug/1749393
      # This bug has already fixed in Ubuntu 20.10.
      # However, this fix is not included in Ubuntu 20.04.
      # Therefore, we temporaly use qemu-user-static in Ubuntu 20.10.
      # We remove this step when qemu-user-static in Ubuntu 20.04 will include above remediation.
      - name: Install QEMU from Groovy
        run: |
          sudo tee /etc/apt/preferences.d/qemu <<EOF
          Package: *
          Pin: release n=focal
          Pin-Priority: 900
          Package: *
          Pin: release n=groovy
          Pin-Priority: 400
          EOF
          sudo tee /etc/apt/sources.list.d/groovy.list <<EOF
          deb http://jp.archive.ubuntu.com/ubuntu groovy universe
          deb http://jp.archive.ubuntu.com/ubuntu groovy-updates universe
          deb http://security.ubuntu.com/ubuntu groovy-security universe
          EOF
          sudo apt update
          sudo apt install -t groovy qemu-user-static
      - name: Install Sphinx
        run: |
          sudo pip3 install -v sphinx
      - name: Clone dependencies
        run: |
          cd ..
          git clone --depth 1 https://github.com/groonga/groonga.org.git
          git clone --depth 1 https://github.com/clear-code/cutter.git
      - name: Generate configure
        run: |
          ./autogen.sh
      - name: Configure for archive
        run: |
          ./configure \
            --enable-document \
            --enable-mruby \
            --with-cutter-source-path=../cutter \
            --with-groonga-org-path=../groonga.org \
            --with-ruby
      - name: Build archive
        run: |
          make dist
      - name: Update version
        run: |
          OLD_RELEASE=$(grep -E -o '[0-9.]+' packages/debian/changelog | \
                          head -n1)
          OLD_RELEASE_DATE_FULL="$(grep '^ -- ' packages/debian/changelog | \
                                     head -n1 | \
                                     sed -E -e 's/ -- .+<[^>]+>  //')"
          OLD_RELEASE_DATE=$(date --date="${OLD_RELEASE_DATE_FULL}" +%Y-%m-%d)
          make update-latest-release \
            OLD_RELEASE=${OLD_RELEASE} \
            OLD_RELEASE_DATE=${OLD_RELEASE_DATE} \
            NEW_RELEASE_DATE=$(date +%Y-%m-%d)
      - name: Cache ccache
        uses: actions/cache@v2
        with:
          path: packages/${{ matrix.task-namespace }}/build/${{ matrix.target }}/ccache
          key: package-${{ matrix.id }}-ccache-${{ hashFiles('lib/**/*.c', 'lib/**/*.cpp', 'lib/**/*.h') }}
          restore-keys: package-${{ matrix.id }}-ccache-
      - name: Build with docker
        run: |
          cd packages
          rake ${{ matrix.task-namespace }}:build BUILD_DIR=build
        env:
          APT_TARGETS: ${{ matrix.target }}
          YUM_TARGETS: ${{ matrix.target }}

      # Artifact
      - uses: actions/upload-artifact@v2
        with:
          name: packages-${{ matrix.id }}
          path: packages/${{ matrix.task-namespace }}/repositories/

      # Release
      - name: Create assets
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          tar czf ${{ matrix.id }}.tar.gz packages/${{ matrix.task-namespace }}/repositories/
      - name: Ensure creating release
        if: |
          startsWith(github.ref, 'refs/tags/')
        id: create-release
        uses: actions/github-script@0.4.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const AsyncFunction = Object.getPrototypeOf(async () => {}).constructor
            const fs = require("fs");
            const path = ".github/workflows/ensure-creating-release.js";
            const script = fs.readFileSync(path).toString();
            const func = new AsyncFunction("require", "github", "context", script);
            return await func(require, github, context);
      - name: Upload to release
        uses: actions/upload-release-asset@v1.0.1
        if: |
          startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.result }}
          asset_path: ${{ matrix.id }}.tar.gz
          asset_name: ${{ matrix.id }}.tar.gz
          asset_content_type: application/gzip

      # Test
      - name: Test
        run: |
          docker run \
            --rm \
            --volume ${PWD}:/groonga:ro \
            ${{ matrix.test-docker-image }} \
            /groonga/packages/${{ matrix.task-namespace }}/test.sh
