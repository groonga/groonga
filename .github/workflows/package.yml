name: Package
on:
  push:
  pull_request:
  schedule:
    - cron: |
        0 0 * * *
jobs:
  build:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        label:
          - Debian GNU/Linux stretch amd64
        include:
          - label: Debian GNU/Linux stretch amd64
            id: debian-stretch-amd64
            rake_arguments: apt:build APT_TARGETS=debian-stretch
            repositories_path: packages/apt/repositories/
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt -V install \
            autoconf-archive \
            bison \
            devscripts \
            python3-pip \
            ruby
      - name: Install Sphinx
        run: |
          sudo pip3 install -v sphinx
      - name: Clone dependencies
        run: |
          cd ..
          git clone --depth 1 https://github.com/groonga/groonga.org.git
          git clone --depth 1 https://github.com/clear-code/cutter.git
      - name: Generate configure
        run: |
          ./autogen.sh
      - name: Configure for archive
        run: |
          ./configure \
            --enable-document \
            --enable-mruby \
            --with-cutter-source-path=../cutter \
            --with-groonga-org-path=../groonga.org \
            --with-ruby
      - name: Build archive
        run: |
          make dist
      - name: Update version
        run: |
          OLD_RELEASE=$(grep -E -o '[0-9.]+' packages/debian/changelog | \
                          head -n1)
          OLD_RELEASE_DATE_FULL="$(grep '^ -- ' packages/debian/changelog | \
                                     head -n1 | \
                                     sed -E -e 's/ -- .+<[^>]+>  //')"
          OLD_RELEASE_DATE=$(date --date="${OLD_RELEASE_DATE_FULL}" +%Y-%m-%d)
          make update-latest-release \
            OLD_RELEASE=${OLD_RELEASE} \
            OLD_RELEASE_DATE=${OLD_RELEASE_DATE} \
            NEW_RELEASE_DATE=$(date +%Y-%m-%d)
      - name: Build with docker
        run: |
          cd packages
          rake ${{ matrix.rake_arguments }}
        env:
          APACHE_ARROW_REPOSITORY: ../../arrow

      # Artifact
      - uses: actions/upload-artifact@master
        with:
          name: packages-${{ matrix.id }}
          path: ${{ matrix.repositories_path }}

      # Release
      - name: Create assets
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          tar czf ${{ matrix.id }}.tar.gz ${{ matrix.repositories_path }}
      - name: Ensure creating release
        if: |
          startsWith(github.ref, 'refs/tags/')
        id: create-release
        uses: actions/github-script@0.4.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const AsyncFunction = Object.getPrototypeOf(async () => {}).constructor
            const fs = require("fs");
            const path = ".github/workflows/ensure-creating-release.js";
            const script = fs.readFileSync(path).toString();
            const func = new AsyncFunction("require", "github", "context", script);
            return await func(require, github, context);
      - name: Upload to release
        uses: actions/upload-release-asset@v1.0.1
        if: |
          startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.result }}
          asset_path: ${{ matrix.id }}.tar.gz
          asset_name: ${{ matrix.id }}.tar.gz
          asset_content_type: application/gzip

  tests:
    needs: build
    name: Tests for packages
    strategy:
      fail-fast: false
      matrix:
        label:
          - Debian GNU/Linux stretch amd64
        include:
          - label: Debian GNU/Linux stretch amd64
            id: debian-stretch-amd64
            rake_arguments: apt:build APT_TARGETS=debian-stretch
            repositories_path: packages/apt/repositories/
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/download-artifact@v1
        with:
          name: packages-${{ matrix.id }}
      - name: Decompress a package
        run: |
          rm -rf packages/apt/repositories/
          mkdir -p packages/apt/repositories/
          cp -rf packages-debian-stretch-amd64/* packages/apt/repositories/
          sudo apt install tree
          tree
          rm -rf packages-debian-stretch-amd64
      - name: Make docker images
        run: |
          cd packages/apt/
          docker build \
            --tag groonga-debian-stretch \
            --build-arg DEBUG=yes debian-stretch
          docker run \
            --rm \
            --tty \
            --volume /home/runner/work/groonga/groonga/packages/apt:/host:rw \
            --volume /home/runner/work/groonga/groonga/packages/apt/repositories:/repositories:ro \
            --env DEBUG=yes \
            groonga-debian-stretch /host/test.sh
